#!/usr/bin/env python

import getopt
import os, sys
import string
import threading
import select
import time
import stat
import signal
import popen2
import commands
import re
try:
    from gbbuser import *
except:
    pass

# Ensuring critical definitions
def EnsureDefinition(name, definition, target=__builtins__.__dict__):
    if not target.has_key(name):
        exec definition in target

# Check for True/False builtins
EnsureDefinition('False','False = 0')
EnsureDefinition('True','True = not False')

#
#########################################################
# GRID BigBrother                                       #
# Alessandro De Salvo <Alessandro.DeSalvo@roma1.infn.it #
# v0.9 - 20081110                                       #
#########################################################
#

__version__ = "$Revision: 0.9 $"[11:-1]
__author__  = "Alessandro De Salvo <Alessandro.DeSalvo@roma1.infn.it>"

HELP="""
GriBB - Grid Big Brother %s.
Usage: gbb [OPTIONS] <program name 1> <program name 2> ...

Options:
  -b|--bdii <bdii name>        BDII server to use
                               (default: %s).
  -c|--cpu-limit <cpu %%>       minimum cpu limit between two monitoring calls.
                               If the process consumes less than the given
                               amount of CPU time it will be killed.
  -d|--debug                   print debug messages.
  -D|--dump-interval <seconds> partial output dump interval, in seconds.
  -f|--force-dump              force immediate dump of partial output.
  -h|--help                    display this help and exit.
  -l|--time-limit <seconds>    maximum running time for the process, in seconds.
  -L|--tail                    always output the last partial fragment.
  -M|--memory-limit <MB>       maximum memory allocation for the process, in MB.
  -m|--mon-interval <seconds>  monitoring poll time, in seconds.
  -o|--out-limit <KB>          maximum output size, in KB.
  -p|--partial                 periodically dump the partial output to <server>.
                               (to be used with the --server option).
  -P|--bdii-port <port>        BDII port to use (default: %d).
  -s|--server <server>         use <server> to dump the partial output.
  -t|--timing                  time the process to run and GBB used cpu.
  -T|--temp-dir <path>         use <path> to store temporary files.
  -V|--vo <vo name>            vo name (default: %s).
  -v|--verbose                 be verbose.

%s
"""

BANNER="""
GBB> ############################################################
GBB> # Grid Big Brother v%s starting.
GBB> #    
GBB> # %s
GBB> ############################################################

"""

__LDAPGETSAROOT__ = "ldapsearch -s sub -x -h %s -p %d -b \"mds-vo-name=local,o=grid\" \"(&(objectClass=GlueSATop)(GlueChunkKey=GlueSEUniqueID=%s)(GlueSALocalID=%s))\" GlueSARoot | grep ^GlueSARoot | sed 's#GlueSARoot: ##g' | cut -d: -f 2-"

__GSIFTPLS__      = "edg-gridftp-ls %s 2>/dev/null | grep %s"
__GSIFTPCP__      = "globus-url-copy file:%s %s"
__GSIFTPRM__      = "edg-gridftp-rm %s"
__GSIFTPMKDIR__   = "edg-gridftp-mkdir --parents %s"

__BDII__          = "atlas-bdii.cern.ch"
__BDIIPORT__      = 2170
__VO__            = "atlas"

__PARTIALOUT__    = "%s/out.part"
__PARTIALSTATS__  = "%s/stats.part"

class gBB:

    # Command line switches
    short_options = "hb:c:dD:fl:LM:m:o:pP:s:tT:vV:"
    long_options = ["help",          "bdii=",         "bdii-port=",
                    "cpu-limit=",    "debug",         "dump-interval=",
                    "force-dump",    "memory-limit=", "mon-interval=",
                    "out-limit",     "partial",       "server=",
                    "tail",          "temp-dir=",     "time-limit=",
                    "timing",        "verbose",       "vo="]

    # Defaults for actions
    doTail                   = False
    doTiming                 = False
    doDumpPartialOutput      = False
    doForceDumpPartialOutput = False
    cpuLimit                 = -1
    memoryLimit              = -1
    outputMaxSize            = -1
    timeLimit                = -1
    maxRetries               = 5

    # Other defaults
    verbose                  = False
    debug                    = False
    server                   = None
    BDII                     = __BDII__
    BDIIport                 = __BDIIPORT__
    VO                       = __VO__
    SARoot                   = None
    tempDir                  = os.getcwd()
    partialDumpFileName      = lambda self: __PARTIALOUT__ % self.tempDir
    partialStatFileName      = lambda self: __PARTIALSTATS__ % self.tempDir
    partialDumpFD            = None
    partialDumperIsRunning   = False
    stderrSize               = 0
    stdoutSize               = 0
    lastPosition             = 0
    sequence                 = 0
    dump                     = None
    proc                     = None
    mon                      = None
    monInterval              = 100
    dumpInterval             = 600
    pids                     = {}
    lastCPU                  = 0
    begin                    = None
    last                     = None
    shutdown                 = False

    # Times
    userTime                 = 0
    systemTime               = 0
    cuserTime                = 0
    csystemTime              = 0
    realTime                 = 0
    ptime                    = -1
    pclock                   = -1

    # Program list
    progList                 = []

    # Exit code
    exitCode                 = 0

    def __init__ (self):
        # Get the command line options
        try:
            opts, args = getopt.getopt(sys.argv[1:],
                         self.short_options,
                         self.long_options,
                         )
        except getopt.GetoptError, msg:
            # Print the help
            sys.stdout.write(str(msg))
            sys.stdout.write("\nLast command:\n%s" % sys.argv[0])
            for item in sys.argv[1:]:
                sys.stdout.write(" %s" % item)
            sys.stdout.write("\n")
            self.help()
            sys.exit(-1)

        # Local vars
        cmd=''
        arg=''
        for cmd, arg in opts:
            if cmd in ('--help','-h'):
                self.help()
                sys.exit()
            elif cmd in ('--bdii','-b'):
                self.BDII = arg
            elif cmd in ('--bdii-port','-P'):
                self.BDIIport = int(arg)
            elif cmd in ('--debug','-d'):
                self.debug = True
            elif cmd in ('--cpu-limit','-c'):
                self.cpuLimit = int(arg)
            elif cmd in ('--dump-interval','-D'):
                self.dumpInterval = int(arg)
            elif cmd in ('--force-dump','-f'):
                self.doForceDumpPartialOutput = True
            elif cmd in ('--memory-limit','-M'):
                self.memoryLimit = int(arg)
            elif cmd in ('--time-limit','-l'):
                self.timeLimit = int(arg)
            elif cmd in ('--tail','-L'):
                self.doTail = True
            elif cmd in ('--mon-interval','-m'):
                self.monInterval = int(arg)
            elif cmd in ('--out-limit','-o'):
                self.outputMaxSize = int(arg)
            elif cmd in ('--partial','-p'):
                self.doDumpPartialOutput = True
            elif cmd in ('--server','-s'):
                self.server = arg
            elif cmd in ('--timing','-t'):
                self.doTiming = True
            elif cmd in ('--temp-dir','-T'):
                self.tempDir = arg
            elif cmd in ('--verbose','-v'):
                self.verbose = True

        if (self.timeLimit > 0 and self.timeLimit < self.monInterval):
            self.monInterval = self.timeLimit
        if (len(args) == 0):
            print "No program list given."
            sys.exit(-1)

        if (self.doDumpPartialOutput and not self.server):
            print "No server specified for partial output monitoring"
            self.help()
            sys.exit()

        self.progList = args


    def run (self):
        if (self.verbose):
            sys.stdout.write(BANNER % (__version__.strip(),__author__))
        self.pids['main'] = os.getpid()

        # Time the command if requested
        if (self.doTiming): self.timer()

        # Start the monitoring thread
        try:
            self.mon = threading.Thread(target=self.monitor)
            self.mon.start()
        except:
            if (self.verbose): sys.stderr.write("GBB> No monitoring started\n")

        # Start the monitoring thread
        try:
            userMod = gbbuser()
            userMod.set(self)
            self.user = threading.Thread(target=userMod.run)
            self.user.start()
        except:
            if (self.verbose): sys.stderr.write("GBB> No user module started\n")

        # Start the thread to dump the partial output, if requested
        if (self.doDumpPartialOutput):
            self.SARoot = self.getSARoot(self.BDII,self.BDIIport,self.server,self.VO)
            if (len(self.SARoot) > 0):
                try:
                    self.dump = threading.Thread(target=self.dumpPartialOutput)
                    self.dump.start()
                except:
                    sys.stderr.write("GBB> Cannot start the partial output dumper.\n")
                    raise
            else:
                sys.stderr.write("GBB> No SARoot found for %s.\n" % self.server)
                sys.stderr.write("GBB> No partial dump will be available.\n")

        # Executes the command
        try:
            self.proc = threading.Thread(target=self.runProcess)
            self.proc.start()
            # Set the process start time
            if (not self.begin):
                self.begin = time.time()
                self.last  = self.begin
            while self.proc.isAlive():
                self.proc.join(5)
        except:
            sys.stderr.write("GBB> Cannot start the process\n")
            raise

        # Close the threads
        self.close()

        # Cleanup
        self.cleanup()

        # End the timing session
        if (self.doTiming): self.timer()

        # The end
        sys.exit(self.exitCode)


    def runProcess (self):
        # Build the command line
        cmd = string.join(self.progList)

        # Check if the command exists
        os.environ['PATH'] = os.getcwd()+':'+os.environ['PATH']
        p = commands.getoutput("which %s 2>/dev/null | tail -n 1 | sed 's/^[ \t]*//'" % self.progList[0])
        if (len(p) > 0):
            pname = p[0].replace('\n','')
            if (pname != ""): self.progList[0] = pname
        if (not os.access(self.progList[0], os.F_OK)):
            sys.stderr.write("GBB> Cannot find '%s'\n" % self.progList[0])
            self.close()
            self.exitCode=127
            sys.exit(-1)

        # Check and fix the file permissions
        if (not os.access(self.progList[0], os.X_OK) or not os.access(self.progList[0], os.R_OK )):
            sys.stderr.write("GBB> Setting mode 0755 to %s\n" % self.progList[0])
            try:
                os.chmod(self.progList[0], 0755)
            except:
                sys.stderr.write("GBB> Unable to execute 'chmod 0755 %s'\n" % self.progList[0])
                self.exitCode=127
                sys.exit(-1)
        if (not os.access(self.progList[0], os.X_OK) or not os.access(self.progList[0], os.R_OK )):
            sys.stderr.write("GBB> Unable to set mode 0755 to %s\n" % self.progList[0])
        #sys.stderr.write("GBB> %s: exec=%s read=%s e+r=%s\n" % (self.progList[0], os.access(self.progList[0], os.X_OK), os.access(self.progList[0], os.R_OK), os.access(self.progList[0], os.X_OK | os.R_OK)))
        sys.stderr.write("GBB> Listing contents of the current directory\n")
        o = commands.getoutput("/bin/ls -l")
        sys.stderr.write("%s\n" % o)

        # If a partial dump has been requested, open a new file for it
        if (self.doDumpPartialOutput):
            try:
                self.partialDumpFD = open(self.partialDumpFileName(),'w')
            except:
                sys.stderr.write("GBB> Cannot open '%s' for writing\n" % self.partialDumpFileName())

        # Executes the command
        child             = popen2.Popen3(cmd, True)
        child_stdin       = child.tochild
        child_stdout      = child.fromchild
        child_stderr      = child.childerr
        self.pids['proc'] = child.pid

        # Close the standard input as it will not be used
        child_stdin.close()
        child_stdoutfd = child_stdout.fileno()
        child_stderrfd = child_stderr.fileno()
        stdout_eof = False
        stderr_eof = False
        # Dump the standard output and error, when they are available
        while 1:
            (self.userTime,self.systemTime,self.cuserTime,self.csystemTime,self.realTime)=os.times()
            ready = select.select( [child_stdoutfd, child_stderrfd], [], [], 2 )
            if (child_stderrfd in ready[0]):
                stderr = child_stderr.readline()
                if (stderr):
                    sys.stderr.write(stderr)
                    if (self.partialDumpFD):
                        self.partialDumpFD.write(stderr)
                        self.partialDumpFD.flush()
                    if (self.outputMaxSize):
                        self.stderrSize = self.stderrSize + len(stderr)
                else:
                    stderr_eof = True
            if (child_stdoutfd in ready[0]):
                stdout = child_stdout.readline()
                if (stdout):
                    sys.stdout.write(stdout)
                    if (self.partialDumpFD):
                        self.partialDumpFD.write(stdout)
                        self.partialDumpFD.flush()
                    if (self.outputMaxSize):
                        self.stdoutSize = self.stdoutSize + len(stdout)
                else:
                    stdout_eof = True
            if (child.poll()>=0 and stderr_eof and stdout_eof): break
        # Save the exit code
        if (self.exitCode == 0): self.exitCode = child.poll()/256

        # Close the standard output and error
        child_stdout.close()
        child_stderr.close()

        # Close the partial output file
        if (self.partialDumpFD): self.partialDumpFD.close()

        # Reset the process pid
        if (self.pids.has_key('proc')): del self.pids['proc']

    def timer (self):
        # Get the timing betweek two calls to the same function
        if (self.verbose): sys.stderr.write ("GBB> Timer called\n")
        if (self.ptime == -1):
            self.ptime  = time.time()
            self.pclock = time.clock()
        else:
            stopTime   = time.time()
            stopClock  = time.clock()
            sys.stderr.write ("GBB> Elapsed time (s):\t%8.2f\n" % (stopTime-self.ptime))
            sys.stderr.write ("GBB> GBB CPU time (s):\t%8.2f\n" % (stopClock-self.pclock))
            self.time  = -1
            self.clock = -1

    def monitor(self):
        if (not self.begin):
            self.begin = time.time()
            self.last  = self.begin
        usleep = int(self.monInterval/0.1)
        while (not self.shutdown):
            for num in range(0,usleep):
                if (self.shutdown): break
                time.sleep(0.1)
            elapsed = time.time()-self.begin
            if (self.timeLimit > 0 and elapsed >= self.timeLimit and self.pids.has_key('proc')):
                if (self.pids.has_key('proc')):
                    sys.stderr.write("GBB> Process exceeded the maximum time limit (%ds)\n" % self.timeLimit)
                    sys.stderr.write("GBB> Killing pid %s now\n" % self.pids['proc'])
                    self.exitCode=10
                    self.cleanup()
                    self.killproc()

            # Retrieve the process info
            if (self.pids.has_key('proc')):
                procInfo = self.getProcessStats(self.pids['proc'])
                if (self.verbose):
                    sys.stderr.write("\n") 
                    prochead = ''
                    procinfo = ''
                    procsep  = ''
                    for key in ['rss','cput','cpu','real']:
                        if (procInfo.has_key(key)):
                            if (len(prochead) > 0):
                                prochead = prochead + ' '
                                procsep  = procsep  + ' '
                                procinfo = procinfo + ' '
                            prochead = prochead + ("%8s" % key)
                            procsep  = procsep  + "--------"
                            procinfo = procinfo + ("%8.2f" % procInfo[key])
                    sys.stderr.write("GBB> %s\n" % prochead) 
                    sys.stderr.write("GBB> %s\n" % procsep) 
                    sys.stderr.write("GBB> %s\n" % procinfo) 

                # Check for CPU time limit
                if (procInfo.has_key('cpu') and self.cpuLimit > 0 and procInfo['cpu'] < self.cpuLimit):
                    if (not procInfo.has_key('error')):
                        sys.stderr.write("GBB> Process consumed only %3.1f%% of the CPU time in the last %f s.\n" % (procInfo['cpu'],procInfo['interval']))
                        sys.stderr.write("GBB> Killing pid %s now\n" % self.pids['proc'])
                        self.exitCode=20
                        self.cleanup()
                        self.killproc()

                # Check for memory limit
                if (procInfo.has_key('rss') and self.memoryLimit > 0 and procInfo['rss'] > self.memoryLimit):
                    sys.stderr.write("GBB> Memory limit exceeded. Max=%f, current=%f.\n" % (self.memoryLimit,procInfo['rss']))
                    sys.stderr.write("GBB> Killing pid %s now\n" % self.pids['proc'])
                    self.exitCode=30
                    self.cleanup()
                    self.killproc()

                # Check for stdout/stderr max size
                outsize = (self.stdoutSize + self.stderrSize) / 1024.
                if (self.outputMaxSize > 0 and outsize > self.outputMaxSize):
                    sys.stderr.write("GBB> Max output size exceeded. Max=%.1f, current=%.1f.\n" % (self.outputMaxSize,outsize))
                    sys.stderr.write("GBB> Killing pid %s now\n" % self.pids['proc'])
                    self.exitCode=40
                    self.cleanup()
                    self.killproc()


    def dumpPartialOutput(self):
        self.partialDumperIsRunning = True
        if (self.verbose): sys.stderr.write("GBB> Output dumper started\n")

        # Get the job id
        try:
            jobID = os.environ['EDG_WL_JOBID'].split('/')[-1]
        except:
            sys.stderr.write("GBB> Cannot get the jobID. Terminating dumper.\n")
            return

        # Get the certificate subject and check if the proxy is valid
        proxyid = commands.getoutput("grid-proxy-info -identity 2>/dev/null")
        if (len(proxyid) == 0):
            sys.stderr.write("GBB> Cannot retrieve the identity.\n")
            sys.stderr.write("GBB> Terminating dumper.\n")
            return
        identity = re.sub('^_','',re.sub('[^\w]','_',proxyid))

        # Build the SE path
        SEpath=("%s/%s" % (identity,jobID))
        if (self.verbose):
            sys.stderr.write("GBB> Partial output will be saved in the SE in\n")
            sys.stderr.write("GBB> %s\n" % SEpath)

        # Now really start the dumper
        usleep = self.dumpInterval/0.1
        while (not self.shutdown):
            for num in range(0,int(usleep)):
                if (not self.shutdown): time.sleep(0.1)
            if (self.shutdown and self.verbose):
                sys.stderr.write("GBB> Finalizing partial dumper.\n")
            # Dump the partial output of the stdout/stderr files
            dumpEnabled = self.partialDumpEnabled(SEpath)
            if (self.partialDumpFD and (dumpEnabled or self.doTail)):
                try:
                    fd = open(self.partialDumpFileName(),'r')
                    fd.seek(self.lastPosition)
                except:
                    sys.stderr.write("GBB> Cannot read partial output\n")
                    sys.stderr.write("GBB> Terminating partial dumper\n")
                    return
                fdEOF  = False
                fdout  = None
                fdstat = None
                outFileName=self.partialDumpFileName()+("_%06d" % self.sequence)
                statFileName=self.partialStatFileName()+("_%06d" % self.sequence)
                outputlen = 0
                while not fdEOF:
                    try:
                        pout = fd.readline()
                        if (len(pout) > 0):
                            if (dumpEnabled):
                                if (not fdout): fdout = open(outFileName,'w')
                                fdout.write(pout)
                            outputlen = outputlen + len(pout)
                        else:
                            fdEOF = True
                    except:
                        fdEOF = True
                if (fdout): fdout.close()
                if (fd): fd.close()

                # Get the process stats
                if (dumpEnabled and self.pids.has_key('proc')):
                    prochead = ''
                    procinfo = ''
                    procsep  = ''
                    procInfo = self.getProcessStats(self.pids['proc'])
                    if (not fdstat): fdstat = open(statFileName,'w')
                    for key in ['rss','cput','cpu','real']:
                        if (procInfo.has_key(key)):
                            if (len(prochead) > 0):
                                prochead = prochead + ' '
                                procsep  = procsep  + ' '
                                procinfo = procinfo + ' '
                            prochead = prochead + ("%8s" % key)
                            procsep  = procsep  + "--------"
                            procinfo = procinfo + ("%8.2f" % procInfo[key])
                    fdstat.write("%s\n" % prochead) 
                    fdstat.write("%s\n" % procsep) 
                    fdstat.write("%s\n" % procinfo) 
                if (fdstat): fdstat.close()

                # Send out the data via gsiftp
                if (dumpEnabled):
                    rc = self.gsiftpSend(SEpath,outFileName)
                    if (rc == 0):
                        self.sequence     = self.sequence + 1
                        self.lastPosition = self.lastPosition + outputlen
                        if (self.debug):
                            sys.stderr.write("GBB> %d bytes sent.\n" % outputlen)
                    self.gsiftpSend(SEpath,statFileName)
                elif (self.doTail):
                    self.lastPosition = self.lastPosition + outputlen

        self.partialDumperIsRunning = False


    def partialDumpEnabled(self, SEpath):
        # Check if the partial output is enabled
        # or we need to force it
        dest = "gsiftp://%s%s/%s" % (self.server, self.SARoot, SEpath)
        path = commands.getoutput(__GSIFTPLS__ % (os.path.dirname(dest),
                                                  os.path.basename(dest)))
        if (path == os.path.basename(dest)):
            return True
        elif (self.doForceDumpPartialOutput):
            msg = commands.getoutput(__GSIFTPMKDIR__ % dest)
            if (len(msg) == 0):
                return True
            else:
                sys.stderr.write("GBB> Cannot create %s\n" % dest)
                return False


    def getSARoot(self, BDII, port, SE, VO):
        SARoot = commands.getoutput(__LDAPGETSAROOT__ % (BDII, port, SE, VO))
        if (self.verbose):
            sys.stderr.write("GBB> %s SARoot: %s\n" % (SE, SARoot))
        return SARoot

    def gsiftpSend(self,SEpath,source):
        fname = os.path.basename(source)
        dest  = "gsiftp://%s%s/%s/%s" % (self.server,self.SARoot,SEpath,fname)
        if (os.access(source,os.F_OK)):
            if (self.verbose):
                sys.stderr.write("GBB> Copying %s to %s\n" % (source,dest))
            attempt = 0
            while 1:
                msg = commands.getoutput(__GSIFTPCP__ % (source,dest))
                if (len(msg) == 0):
                    sys.stderr.write("GBB> GSIFTP copy OK.\n")
                    os.remove(source)
                    return 0
                elif (attempt < self.maxRetries):
                    attempt = attempt + 1
                    sys.stderr.write("GBB> GSIFTP copy failed. Retrying [%d]\n" % attempt)
                    time.sleep(1)
                else:
                    sys.stderr.write("GBB> GSIFTP copy failed: %s\n" % msg)
                    os.remove(source)
                    return 1
        else:
            return 2

    def getProcessStats(self, procPPID):
        # Set the initial time, if needed
        if (not self.begin):
            self.begin = time.time()
            self.last  = self.begin

        # Get the current time
        current = time.time()

        # Get the info on the processes from ps
        pInfo = {}
        pidList  = []
        procData = {}
        schema = {'rss':1, 'cput':2}
        pList = commands.getoutput('ps xlS').split('\n')[1:]
        for proc in pList:
            info = proc.split()
            pid  = int(info[2])
            ppid = int(info[3])
            rss  = int(info[7])/1024.
            cput = int(info[11].split(':')[0])*60+int(info[11].split(':')[1])
            pInfo[str(pid)] = [ppid, rss, cput]
            if (pid == procPPID):
                pidList = [[procPPID]]
                procData['rss']  = rss
                procData['cput'] = cput

        # Build the global info for process procPPID
        # by summing up all the contributions from the children
        if (self.debug):
            if (len(pidList) > 0):
                sys.stderr.write("PPID: %d %d\n" % (procPPID, pidList[len(pidList)-1][0]))
                for pid, info in pInfo.items():
                    sys.stderr.write("PS -> %s: %d %.2f %d\n" % (pid, info[0], info[1], info[2]))
        while 1:
            if (len(pidList) > 0):
                parents = pidList[len(pidList)-1]
            else:
                parents = []
            pidArray = []
            if (self.debug):
                sys.stderr.write("PARENT LIST:")
                for parent in parents:
                    sys.stderr.write(" %d" % parent)
                sys.stderr.write("\n")
            for parent in parents:
                if (self.debug):
                    sys.stderr.write("Finding children of pid %d\n" % parent)
                for pid, info in pInfo.items():
                    if (info[0] == parent):
                        if (self.debug):
                            sys.stderr.write("Pid %d is a child of pid %d\n" % (int(pid), parent))
                        pidArray.append(int(pid))
                        for key, pos in schema.items():
                            if (self.debug):
                                sys.stderr.write("%s + %f\n" % (key, info[pos]))
                            procData[key] = procData[key] + info[pos]
            if (len(pidArray) > 0):
                pidList.append(pidArray)
            else:
                break
        procData['hierarchy'] = pidList
        procData['real']      = current - self.begin
        procData['interval']  = current - self.last
        if (procData.has_key('cput')):
            cpudiff = procData['cput']-self.lastCPU
            if (cpudiff < 0):
                procData['error'] = 1
                cpudiff = 0
            timediff = current-self.last
            if (timediff > 0):
                procData['cpu'] = cpudiff/timediff*100.
            else:
                procData['cpu'] = 0
            self.lastCPU = procData['cput']
        self.last = current

        # Return the process info dictionary
        return procData

    def close(self):
        # Send the shutdown to all the threads
        self.shutdown = True
        #self.dumpPartialOutput()

    def cleanup(self):
        # Remove the partial output file
        if (os.access(self.partialDumpFileName(),os.F_OK)):
            while (self.partialDumperIsRunning):
                if (self.verbose):
                    sys.stderr.write("GBB> Waiting for the partial dumper to exit.\n")
                time.sleep(5)
            try:
                os.remove(self.partialDumpFileName())
            except:
                pass

    def killproc(self):
        # Kill all the child processes
        if (self.pids.has_key('proc')):
            procInfo = self.getProcessStats(self.pids['proc'])
            if (procInfo.has_key('hierarchy')):
                for pids in procInfo['hierarchy']:
                    for pid in pids:
                        try:
                            os.kill(pid,signal.SIGKILL)
                        except:
                            pass

    def help(self):
        # Print the help
        print HELP % (__version__.strip(),self.BDII,self.BDIIport,self.VO,
                                          __author__)


# Signal handler
def signalHandler(signal, frame):
     gbb.killproc()

# main class
if __name__ == '__main__':
    global gbb

    # Set up signal handlers
    signal.signal(signal.SIGINT,  signalHandler)
    signal.signal(signal.SIGTERM, signalHandler)

    # Create a new gBB object
    gbb=gBB()
    # Start the gBB object
    gbb.run()
